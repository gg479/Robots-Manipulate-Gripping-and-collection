#!/usr/bin/env python3

#---------------Import Libraries and msgs---------------:

import rospy
import time
from std_msgs.msg import *
from geometry_msgs.msg import *
from control_lib import UR_Controller
import RG_gripper


#---------------Initialise---------------:
rospy.init_node('cube_gripper_ur10', anonymous=False)
play = rospy.Publisher('/trajectory_generator/play', String, queue_size=10)
ur_script = rospy.Publisher('/ur_hardware_interface/script_command', String, queue_size=10)
ur_con = UR_Controller()
time.sleep(2)
#ROBOT_IP = "192.168.0.50"
#---------------Define Variables---------------:

#Move J's are faster, since precision isn't the goal
max_acc = 1.0
max_vel = 1.0
header = "def myProg():"
footer = "\nend"

#----------------------------------------------------------------------------------------------#
home_waypoint = [0, -1.1571532941, -2.2781782726, -1.2768828808, 1.5707963268, 0]
#--------------------------------Second grip---------------------------------------------------#

# waypoints for the arm robot movement
waypoints = [
	[1.5707963268, -1.1571532941, -2.2781782726, -1.2768828808, 1.5707963268, 0],
	[1.5714944585,  -1.6060519777, -2.2294835865, -0.8953539063, 1.5734143207, 0.0340339204],
	[1.5707963268, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[0, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[0, -1.5851080267, -2.2324506462, -0.9297368925, 1.5699236622, 0],
	[0, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[1.3962634016, -1.1571532941, -2.2781782726, -1.2768828808, 1.5707963268, 0],
	[1.1873474901, -1.6992525597, -2.1362830044, -0.8941321758, 1.5711453926, 0],
	[1.3962634016, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[0, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[0, -1.5149457907, -2.1708405236, -1.0615092511, 1.5707963268, 0],
	[0, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[1.308996939, -1.1571532941, -2.2781782726, -1.2768828808, 1.5707963268, 0],
	[0.9208357134, -1.7350318094, -2.1020745511, -0.8923868465, 1.5716689914, 0],
	[1.308996939, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[0, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0],
	[0,-1.5008086238, -2.0753710135, -1.2049753156, 1.5707963268, 0],
	[0, -1.3798573066, -2.0704840916, -1.2774064795, 1.5707963268, 0]
]

robot_path = [home_waypoint]

def home_robot():
	header = "def myProg():"
	footer = "\nend"
	home_waypoint = [-1.58825, -1.71042, -2.19911, -0.802851, 1.58825, -0.03106686]
	move_msg ="\nmovej({},a={},v={},t={},r={})".format(home_waypoint, max_acc ,max_vel,0,0)
	command = header + move_msg + footer
	return command

def move_j_pose(pose):
	header = "def myProg():"
	footer = "\nend"
	x = pose.position.x
	y = pose.position.y
	z = pose.position.z
	rx, ry, rz = UR_Controller().convert_to_euler(pose.orientation)
	pose_str = '['+str(x)+ ',' +str(y)+ ',' +str(z)+ ',' +str(rx)+ ',' +str(ry)+ ',' +str(rz) +']'
	command = header + '\n\tmovej(p{}, a={}, v={}, t=0, r=0)'.format(pose_str, max_acc, max_vel) + footer
	return command

#---------------Main Code---------------:
def load_payload():
	## Move using local function and waypoint
	command = home_robot()
	ur_script.publish(command)

	## Move using local function and pose
	my_pos = ur_con.get_pose()
	command = move_j_pose(my_pos) 
	ur_script.publish(command)
	print(my_pos)
	time.sleep(3)

	for waypoint, i in waypoints:
		command = ur_con.generate_move_j(waypoint)
		ur_script.publish(command)
		time.sleep(5)

		if i == 1 or i == 2:
			RG6 = RG_gripper.RG_Message_Generator("RG6")
			ur_script.publish(RG6.message(110, 25)) #generate and send to robot
		
		time.sleep(5)
	
	feedback_pub.publish('LOADING_COMPLETE')


# handles actions from the server
def handler(data):
	print("UR10 action: ", data.data)
	if data.data == "LOAD_TURTLE":
		load_payload()
	

print('Starting UR10')

feedback_pub = rospy.Publisher("feedback/ur10", String, queue_size=10)
action_sub = rospy.Subscriber("action/ur10", String, handler)

rospy.spin()