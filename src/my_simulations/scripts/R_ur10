#!/usr/bin/env python3

#---------------Import Libraries and msgs---------------:
from gazebo_msgs.msg import ModelState
from gazebo_msgs.srv import SetModelState
import rospy
import time
import math
import numpy as np
from std_msgs.msg import *
from geometry_msgs.msg import *
import tf2_msgs.msg
from tf.transformations import euler_from_quaternion
from collections import Counter
from control_lib import UR_Controller
from geometry_msgs.msg import Twist

#---------------Initialise---------------:



print("Please Wait While System Starts Up...")
rospy.init_node("move_l_example", anonymous=False)
ur_script = rospy.Publisher('/ur_hardware_interface/script_command', String, queue_size=10)
ur_con = UR_Controller()
time.sleep(2)
print("System Started")


#---------------Main Code---------------:

# Home robot


my_pos = ur_con.get_pose()  #get the pose from ur10
print(my_pos)
rospy.wait_for_service('/gazebo/set_model_state') # wait the service to be available
robot_arm = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState) # creat broxy talking to the service (set-up) (from ModelState to SetModelState)

UR10_State=ModelState() #initialize modelstate msgs
UR10_State.pose=my_pos # UR10 pose

UR10_State.twist=Twist() #initialize  modelstate msgs # get ur10 twist

UR10_State.model_name = "camera_box" # get camera model name 

UR10_State.reference_frame = "world" # get world name 
resp1 = robot_arm(UR10_State) # talk to the service

'{model_state: { model_name: camera_box, pose: { position: { x: 0, y: 0 ,z: 0 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'


